// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"github.com/BrandonWade/enako/api/controllers"
)

type FakeAccountController struct {
	ActivateAccountStub        func(http.ResponseWriter, *http.Request)
	activateAccountMutex       sync.RWMutex
	activateAccountArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	ChangePasswordStub        func(http.ResponseWriter, *http.Request)
	changePasswordMutex       sync.RWMutex
	changePasswordArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	RegisterUserStub        func(http.ResponseWriter, *http.Request)
	registerUserMutex       sync.RWMutex
	registerUserArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountController) ActivateAccount(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.activateAccountMutex.Lock()
	fake.activateAccountArgsForCall = append(fake.activateAccountArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("ActivateAccount", []interface{}{arg1, arg2})
	fake.activateAccountMutex.Unlock()
	if fake.ActivateAccountStub != nil {
		fake.ActivateAccountStub(arg1, arg2)
	}
}

func (fake *FakeAccountController) ActivateAccountCallCount() int {
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	return len(fake.activateAccountArgsForCall)
}

func (fake *FakeAccountController) ActivateAccountCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.activateAccountMutex.Lock()
	defer fake.activateAccountMutex.Unlock()
	fake.ActivateAccountStub = stub
}

func (fake *FakeAccountController) ActivateAccountArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	argsForCall := fake.activateAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountController) ChangePassword(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.changePasswordMutex.Lock()
	fake.changePasswordArgsForCall = append(fake.changePasswordArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("ChangePassword", []interface{}{arg1, arg2})
	fake.changePasswordMutex.Unlock()
	if fake.ChangePasswordStub != nil {
		fake.ChangePasswordStub(arg1, arg2)
	}
}

func (fake *FakeAccountController) ChangePasswordCallCount() int {
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	return len(fake.changePasswordArgsForCall)
}

func (fake *FakeAccountController) ChangePasswordCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.changePasswordMutex.Lock()
	defer fake.changePasswordMutex.Unlock()
	fake.ChangePasswordStub = stub
}

func (fake *FakeAccountController) ChangePasswordArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	argsForCall := fake.changePasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountController) RegisterUser(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.registerUserMutex.Lock()
	fake.registerUserArgsForCall = append(fake.registerUserArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("RegisterUser", []interface{}{arg1, arg2})
	fake.registerUserMutex.Unlock()
	if fake.RegisterUserStub != nil {
		fake.RegisterUserStub(arg1, arg2)
	}
}

func (fake *FakeAccountController) RegisterUserCallCount() int {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	return len(fake.registerUserArgsForCall)
}

func (fake *FakeAccountController) RegisterUserCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = stub
}

func (fake *FakeAccountController) RegisterUserArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	argsForCall := fake.registerUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	fake.changePasswordMutex.RLock()
	defer fake.changePasswordMutex.RUnlock()
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.AccountController = new(FakeAccountController)
