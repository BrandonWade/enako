// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	"github.com/BrandonWade/enako/api/controllers"
)

type FakeCategoryController struct {
	GetCategoriesStub        func(http.ResponseWriter, *http.Request)
	getCategoriesMutex       sync.RWMutex
	getCategoriesArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCategoryController) GetCategories(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.getCategoriesMutex.Lock()
	fake.getCategoriesArgsForCall = append(fake.getCategoriesArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("GetCategories", []interface{}{arg1, arg2})
	fake.getCategoriesMutex.Unlock()
	if fake.GetCategoriesStub != nil {
		fake.GetCategoriesStub(arg1, arg2)
	}
}

func (fake *FakeCategoryController) GetCategoriesCallCount() int {
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	return len(fake.getCategoriesArgsForCall)
}

func (fake *FakeCategoryController) GetCategoriesCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.getCategoriesMutex.Lock()
	defer fake.getCategoriesMutex.Unlock()
	fake.GetCategoriesStub = stub
}

func (fake *FakeCategoryController) GetCategoriesArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	argsForCall := fake.getCategoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCategoryController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.CategoryController = new(FakeCategoryController)
