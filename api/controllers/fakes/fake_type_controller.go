// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	http "net/http"
	sync "sync"

	controllers "github.com/BrandonWade/enako/api/controllers"
)

type FakeTypeController struct {
	GetTypesStub        func(http.ResponseWriter, *http.Request)
	getTypesMutex       sync.RWMutex
	getTypesArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTypeController) GetTypes(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.getTypesMutex.Lock()
	fake.getTypesArgsForCall = append(fake.getTypesArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("GetTypes", []interface{}{arg1, arg2})
	fake.getTypesMutex.Unlock()
	if fake.GetTypesStub != nil {
		fake.GetTypesStub(arg1, arg2)
	}
}

func (fake *FakeTypeController) GetTypesCallCount() int {
	fake.getTypesMutex.RLock()
	defer fake.getTypesMutex.RUnlock()
	return len(fake.getTypesArgsForCall)
}

func (fake *FakeTypeController) GetTypesCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.getTypesMutex.Lock()
	defer fake.getTypesMutex.Unlock()
	fake.GetTypesStub = stub
}

func (fake *FakeTypeController) GetTypesArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getTypesMutex.RLock()
	defer fake.getTypesMutex.RUnlock()
	argsForCall := fake.getTypesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTypeController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTypesMutex.RLock()
	defer fake.getTypesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTypeController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.TypeController = new(FakeTypeController)
