// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/helpers"
)

type FakePasswordHasher struct {
	CompareStub        func(string, string) error
	compareMutex       sync.RWMutex
	compareArgsForCall []struct {
		arg1 string
		arg2 string
	}
	compareReturns struct {
		result1 error
	}
	compareReturnsOnCall map[int]struct {
		result1 error
	}
	GenerateStub        func(string) (string, error)
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		arg1 string
	}
	generateReturns struct {
		result1 string
		result2 error
	}
	generateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePasswordHasher) Compare(arg1 string, arg2 string) error {
	fake.compareMutex.Lock()
	ret, specificReturn := fake.compareReturnsOnCall[len(fake.compareArgsForCall)]
	fake.compareArgsForCall = append(fake.compareArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Compare", []interface{}{arg1, arg2})
	fake.compareMutex.Unlock()
	if fake.CompareStub != nil {
		return fake.CompareStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.compareReturns
	return fakeReturns.result1
}

func (fake *FakePasswordHasher) CompareCallCount() int {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	return len(fake.compareArgsForCall)
}

func (fake *FakePasswordHasher) CompareCalls(stub func(string, string) error) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = stub
}

func (fake *FakePasswordHasher) CompareArgsForCall(i int) (string, string) {
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	argsForCall := fake.compareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePasswordHasher) CompareReturns(result1 error) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = nil
	fake.compareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePasswordHasher) CompareReturnsOnCall(i int, result1 error) {
	fake.compareMutex.Lock()
	defer fake.compareMutex.Unlock()
	fake.CompareStub = nil
	if fake.compareReturnsOnCall == nil {
		fake.compareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.compareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePasswordHasher) Generate(arg1 string) (string, error) {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Generate", []interface{}{arg1})
	fake.generateMutex.Unlock()
	if fake.GenerateStub != nil {
		return fake.GenerateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePasswordHasher) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *FakePasswordHasher) GenerateCalls(stub func(string) (string, error)) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = stub
}

func (fake *FakePasswordHasher) GenerateArgsForCall(i int) string {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	argsForCall := fake.generateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePasswordHasher) GenerateReturns(result1 string, result2 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordHasher) GenerateReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordHasher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compareMutex.RLock()
	defer fake.compareMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePasswordHasher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ helpers.PasswordHasher = new(FakePasswordHasher)
