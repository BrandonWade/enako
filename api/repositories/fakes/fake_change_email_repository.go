// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/repositories"
)

type FakeChangeEmailRepository struct {
	CreateChangeEmailTokenStub        func(int64, string) (int64, error)
	createChangeEmailTokenMutex       sync.RWMutex
	createChangeEmailTokenArgsForCall []struct {
		arg1 int64
		arg2 string
	}
	createChangeEmailTokenReturns struct {
		result1 int64
		result2 error
	}
	createChangeEmailTokenReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailToken(arg1 int64, arg2 string) (int64, error) {
	fake.createChangeEmailTokenMutex.Lock()
	ret, specificReturn := fake.createChangeEmailTokenReturnsOnCall[len(fake.createChangeEmailTokenArgsForCall)]
	fake.createChangeEmailTokenArgsForCall = append(fake.createChangeEmailTokenArgsForCall, struct {
		arg1 int64
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateChangeEmailToken", []interface{}{arg1, arg2})
	fake.createChangeEmailTokenMutex.Unlock()
	if fake.CreateChangeEmailTokenStub != nil {
		return fake.CreateChangeEmailTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createChangeEmailTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailTokenCallCount() int {
	fake.createChangeEmailTokenMutex.RLock()
	defer fake.createChangeEmailTokenMutex.RUnlock()
	return len(fake.createChangeEmailTokenArgsForCall)
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailTokenCalls(stub func(int64, string) (int64, error)) {
	fake.createChangeEmailTokenMutex.Lock()
	defer fake.createChangeEmailTokenMutex.Unlock()
	fake.CreateChangeEmailTokenStub = stub
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailTokenArgsForCall(i int) (int64, string) {
	fake.createChangeEmailTokenMutex.RLock()
	defer fake.createChangeEmailTokenMutex.RUnlock()
	argsForCall := fake.createChangeEmailTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailTokenReturns(result1 int64, result2 error) {
	fake.createChangeEmailTokenMutex.Lock()
	defer fake.createChangeEmailTokenMutex.Unlock()
	fake.CreateChangeEmailTokenStub = nil
	fake.createChangeEmailTokenReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeEmailRepository) CreateChangeEmailTokenReturnsOnCall(i int, result1 int64, result2 error) {
	fake.createChangeEmailTokenMutex.Lock()
	defer fake.createChangeEmailTokenMutex.Unlock()
	fake.CreateChangeEmailTokenStub = nil
	if fake.createChangeEmailTokenReturnsOnCall == nil {
		fake.createChangeEmailTokenReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createChangeEmailTokenReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeEmailRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createChangeEmailTokenMutex.RLock()
	defer fake.createChangeEmailTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChangeEmailRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.ChangeEmailRepository = new(FakeChangeEmailRepository)
