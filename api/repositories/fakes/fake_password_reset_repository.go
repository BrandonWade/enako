// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/models"
	"github.com/BrandonWade/enako/api/repositories"
)

type FakePasswordResetRepository struct {
	CreatePasswordResetTokenStub        func(int64, string) (int64, error)
	createPasswordResetTokenMutex       sync.RWMutex
	createPasswordResetTokenArgsForCall []struct {
		arg1 int64
		arg2 string
	}
	createPasswordResetTokenReturns struct {
		result1 int64
		result2 error
	}
	createPasswordResetTokenReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetPasswordResetTokenByPasswordResetTokenStub        func(string) (*models.PasswordResetToken, error)
	getPasswordResetTokenByPasswordResetTokenMutex       sync.RWMutex
	getPasswordResetTokenByPasswordResetTokenArgsForCall []struct {
		arg1 string
	}
	getPasswordResetTokenByPasswordResetTokenReturns struct {
		result1 *models.PasswordResetToken
		result2 error
	}
	getPasswordResetTokenByPasswordResetTokenReturnsOnCall map[int]struct {
		result1 *models.PasswordResetToken
		result2 error
	}
	ResetPasswordStub        func(string, string) (bool, error)
	resetPasswordMutex       sync.RWMutex
	resetPasswordArgsForCall []struct {
		arg1 string
		arg2 string
	}
	resetPasswordReturns struct {
		result1 bool
		result2 error
	}
	resetPasswordReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePasswordResetRepository) CreatePasswordResetToken(arg1 int64, arg2 string) (int64, error) {
	fake.createPasswordResetTokenMutex.Lock()
	ret, specificReturn := fake.createPasswordResetTokenReturnsOnCall[len(fake.createPasswordResetTokenArgsForCall)]
	fake.createPasswordResetTokenArgsForCall = append(fake.createPasswordResetTokenArgsForCall, struct {
		arg1 int64
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreatePasswordResetToken", []interface{}{arg1, arg2})
	fake.createPasswordResetTokenMutex.Unlock()
	if fake.CreatePasswordResetTokenStub != nil {
		return fake.CreatePasswordResetTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPasswordResetTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePasswordResetRepository) CreatePasswordResetTokenCallCount() int {
	fake.createPasswordResetTokenMutex.RLock()
	defer fake.createPasswordResetTokenMutex.RUnlock()
	return len(fake.createPasswordResetTokenArgsForCall)
}

func (fake *FakePasswordResetRepository) CreatePasswordResetTokenCalls(stub func(int64, string) (int64, error)) {
	fake.createPasswordResetTokenMutex.Lock()
	defer fake.createPasswordResetTokenMutex.Unlock()
	fake.CreatePasswordResetTokenStub = stub
}

func (fake *FakePasswordResetRepository) CreatePasswordResetTokenArgsForCall(i int) (int64, string) {
	fake.createPasswordResetTokenMutex.RLock()
	defer fake.createPasswordResetTokenMutex.RUnlock()
	argsForCall := fake.createPasswordResetTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePasswordResetRepository) CreatePasswordResetTokenReturns(result1 int64, result2 error) {
	fake.createPasswordResetTokenMutex.Lock()
	defer fake.createPasswordResetTokenMutex.Unlock()
	fake.CreatePasswordResetTokenStub = nil
	fake.createPasswordResetTokenReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) CreatePasswordResetTokenReturnsOnCall(i int, result1 int64, result2 error) {
	fake.createPasswordResetTokenMutex.Lock()
	defer fake.createPasswordResetTokenMutex.Unlock()
	fake.CreatePasswordResetTokenStub = nil
	if fake.createPasswordResetTokenReturnsOnCall == nil {
		fake.createPasswordResetTokenReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createPasswordResetTokenReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetToken(arg1 string) (*models.PasswordResetToken, error) {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.Lock()
	ret, specificReturn := fake.getPasswordResetTokenByPasswordResetTokenReturnsOnCall[len(fake.getPasswordResetTokenByPasswordResetTokenArgsForCall)]
	fake.getPasswordResetTokenByPasswordResetTokenArgsForCall = append(fake.getPasswordResetTokenByPasswordResetTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetPasswordResetTokenByPasswordResetToken", []interface{}{arg1})
	fake.getPasswordResetTokenByPasswordResetTokenMutex.Unlock()
	if fake.GetPasswordResetTokenByPasswordResetTokenStub != nil {
		return fake.GetPasswordResetTokenByPasswordResetTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPasswordResetTokenByPasswordResetTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetTokenCallCount() int {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.RUnlock()
	return len(fake.getPasswordResetTokenByPasswordResetTokenArgsForCall)
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetTokenCalls(stub func(string) (*models.PasswordResetToken, error)) {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenByPasswordResetTokenStub = stub
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetTokenArgsForCall(i int) string {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.RUnlock()
	argsForCall := fake.getPasswordResetTokenByPasswordResetTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetTokenReturns(result1 *models.PasswordResetToken, result2 error) {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenByPasswordResetTokenStub = nil
	fake.getPasswordResetTokenByPasswordResetTokenReturns = struct {
		result1 *models.PasswordResetToken
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) GetPasswordResetTokenByPasswordResetTokenReturnsOnCall(i int, result1 *models.PasswordResetToken, result2 error) {
	fake.getPasswordResetTokenByPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenByPasswordResetTokenStub = nil
	if fake.getPasswordResetTokenByPasswordResetTokenReturnsOnCall == nil {
		fake.getPasswordResetTokenByPasswordResetTokenReturnsOnCall = make(map[int]struct {
			result1 *models.PasswordResetToken
			result2 error
		})
	}
	fake.getPasswordResetTokenByPasswordResetTokenReturnsOnCall[i] = struct {
		result1 *models.PasswordResetToken
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) ResetPassword(arg1 string, arg2 string) (bool, error) {
	fake.resetPasswordMutex.Lock()
	ret, specificReturn := fake.resetPasswordReturnsOnCall[len(fake.resetPasswordArgsForCall)]
	fake.resetPasswordArgsForCall = append(fake.resetPasswordArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ResetPassword", []interface{}{arg1, arg2})
	fake.resetPasswordMutex.Unlock()
	if fake.ResetPasswordStub != nil {
		return fake.ResetPasswordStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetPasswordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePasswordResetRepository) ResetPasswordCallCount() int {
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	return len(fake.resetPasswordArgsForCall)
}

func (fake *FakePasswordResetRepository) ResetPasswordCalls(stub func(string, string) (bool, error)) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = stub
}

func (fake *FakePasswordResetRepository) ResetPasswordArgsForCall(i int) (string, string) {
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	argsForCall := fake.resetPasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePasswordResetRepository) ResetPasswordReturns(result1 bool, result2 error) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = nil
	fake.resetPasswordReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) ResetPasswordReturnsOnCall(i int, result1 bool, result2 error) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = nil
	if fake.resetPasswordReturnsOnCall == nil {
		fake.resetPasswordReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.resetPasswordReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePasswordResetRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPasswordResetTokenMutex.RLock()
	defer fake.createPasswordResetTokenMutex.RUnlock()
	fake.getPasswordResetTokenByPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenByPasswordResetTokenMutex.RUnlock()
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePasswordResetRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.PasswordResetRepository = new(FakePasswordResetRepository)
