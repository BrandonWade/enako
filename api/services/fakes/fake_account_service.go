// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/models"
	"github.com/BrandonWade/enako/api/services"
)

type FakeAccountService struct {
	ActivateAccountStub        func(string) (bool, error)
	activateAccountMutex       sync.RWMutex
	activateAccountArgsForCall []struct {
		arg1 string
	}
	activateAccountReturns struct {
		result1 bool
		result2 error
	}
	activateAccountReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CreateAccountStub        func(string, string, string) (int64, error)
	createAccountMutex       sync.RWMutex
	createAccountArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createAccountReturns struct {
		result1 int64
		result2 error
	}
	createAccountReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetPasswordResetTokenStub        func(string) (*models.PasswordResetToken, error)
	getPasswordResetTokenMutex       sync.RWMutex
	getPasswordResetTokenArgsForCall []struct {
		arg1 string
	}
	getPasswordResetTokenReturns struct {
		result1 *models.PasswordResetToken
		result2 error
	}
	getPasswordResetTokenReturnsOnCall map[int]struct {
		result1 *models.PasswordResetToken
		result2 error
	}
	RegisterUserStub        func(string, string, string) (int64, error)
	registerUserMutex       sync.RWMutex
	registerUserArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	registerUserReturns struct {
		result1 int64
		result2 error
	}
	registerUserReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	RequestPasswordResetStub        func(string) (string, error)
	requestPasswordResetMutex       sync.RWMutex
	requestPasswordResetArgsForCall []struct {
		arg1 string
	}
	requestPasswordResetReturns struct {
		result1 string
		result2 error
	}
	requestPasswordResetReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ResetPasswordStub        func(string, string) (bool, error)
	resetPasswordMutex       sync.RWMutex
	resetPasswordArgsForCall []struct {
		arg1 string
		arg2 string
	}
	resetPasswordReturns struct {
		result1 bool
		result2 error
	}
	resetPasswordReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	VerifyAccountStub        func(string, string) (int64, error)
	verifyAccountMutex       sync.RWMutex
	verifyAccountArgsForCall []struct {
		arg1 string
		arg2 string
	}
	verifyAccountReturns struct {
		result1 int64
		result2 error
	}
	verifyAccountReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountService) ActivateAccount(arg1 string) (bool, error) {
	fake.activateAccountMutex.Lock()
	ret, specificReturn := fake.activateAccountReturnsOnCall[len(fake.activateAccountArgsForCall)]
	fake.activateAccountArgsForCall = append(fake.activateAccountArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ActivateAccount", []interface{}{arg1})
	fake.activateAccountMutex.Unlock()
	if fake.ActivateAccountStub != nil {
		return fake.ActivateAccountStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.activateAccountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) ActivateAccountCallCount() int {
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	return len(fake.activateAccountArgsForCall)
}

func (fake *FakeAccountService) ActivateAccountCalls(stub func(string) (bool, error)) {
	fake.activateAccountMutex.Lock()
	defer fake.activateAccountMutex.Unlock()
	fake.ActivateAccountStub = stub
}

func (fake *FakeAccountService) ActivateAccountArgsForCall(i int) string {
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	argsForCall := fake.activateAccountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccountService) ActivateAccountReturns(result1 bool, result2 error) {
	fake.activateAccountMutex.Lock()
	defer fake.activateAccountMutex.Unlock()
	fake.ActivateAccountStub = nil
	fake.activateAccountReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) ActivateAccountReturnsOnCall(i int, result1 bool, result2 error) {
	fake.activateAccountMutex.Lock()
	defer fake.activateAccountMutex.Unlock()
	fake.ActivateAccountStub = nil
	if fake.activateAccountReturnsOnCall == nil {
		fake.activateAccountReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.activateAccountReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) CreateAccount(arg1 string, arg2 string, arg3 string) (int64, error) {
	fake.createAccountMutex.Lock()
	ret, specificReturn := fake.createAccountReturnsOnCall[len(fake.createAccountArgsForCall)]
	fake.createAccountArgsForCall = append(fake.createAccountArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateAccount", []interface{}{arg1, arg2, arg3})
	fake.createAccountMutex.Unlock()
	if fake.CreateAccountStub != nil {
		return fake.CreateAccountStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAccountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) CreateAccountCallCount() int {
	fake.createAccountMutex.RLock()
	defer fake.createAccountMutex.RUnlock()
	return len(fake.createAccountArgsForCall)
}

func (fake *FakeAccountService) CreateAccountCalls(stub func(string, string, string) (int64, error)) {
	fake.createAccountMutex.Lock()
	defer fake.createAccountMutex.Unlock()
	fake.CreateAccountStub = stub
}

func (fake *FakeAccountService) CreateAccountArgsForCall(i int) (string, string, string) {
	fake.createAccountMutex.RLock()
	defer fake.createAccountMutex.RUnlock()
	argsForCall := fake.createAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAccountService) CreateAccountReturns(result1 int64, result2 error) {
	fake.createAccountMutex.Lock()
	defer fake.createAccountMutex.Unlock()
	fake.CreateAccountStub = nil
	fake.createAccountReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) CreateAccountReturnsOnCall(i int, result1 int64, result2 error) {
	fake.createAccountMutex.Lock()
	defer fake.createAccountMutex.Unlock()
	fake.CreateAccountStub = nil
	if fake.createAccountReturnsOnCall == nil {
		fake.createAccountReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createAccountReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) GetPasswordResetToken(arg1 string) (*models.PasswordResetToken, error) {
	fake.getPasswordResetTokenMutex.Lock()
	ret, specificReturn := fake.getPasswordResetTokenReturnsOnCall[len(fake.getPasswordResetTokenArgsForCall)]
	fake.getPasswordResetTokenArgsForCall = append(fake.getPasswordResetTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetPasswordResetToken", []interface{}{arg1})
	fake.getPasswordResetTokenMutex.Unlock()
	if fake.GetPasswordResetTokenStub != nil {
		return fake.GetPasswordResetTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPasswordResetTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) GetPasswordResetTokenCallCount() int {
	fake.getPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenMutex.RUnlock()
	return len(fake.getPasswordResetTokenArgsForCall)
}

func (fake *FakeAccountService) GetPasswordResetTokenCalls(stub func(string) (*models.PasswordResetToken, error)) {
	fake.getPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenStub = stub
}

func (fake *FakeAccountService) GetPasswordResetTokenArgsForCall(i int) string {
	fake.getPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenMutex.RUnlock()
	argsForCall := fake.getPasswordResetTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccountService) GetPasswordResetTokenReturns(result1 *models.PasswordResetToken, result2 error) {
	fake.getPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenStub = nil
	fake.getPasswordResetTokenReturns = struct {
		result1 *models.PasswordResetToken
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) GetPasswordResetTokenReturnsOnCall(i int, result1 *models.PasswordResetToken, result2 error) {
	fake.getPasswordResetTokenMutex.Lock()
	defer fake.getPasswordResetTokenMutex.Unlock()
	fake.GetPasswordResetTokenStub = nil
	if fake.getPasswordResetTokenReturnsOnCall == nil {
		fake.getPasswordResetTokenReturnsOnCall = make(map[int]struct {
			result1 *models.PasswordResetToken
			result2 error
		})
	}
	fake.getPasswordResetTokenReturnsOnCall[i] = struct {
		result1 *models.PasswordResetToken
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) RegisterUser(arg1 string, arg2 string, arg3 string) (int64, error) {
	fake.registerUserMutex.Lock()
	ret, specificReturn := fake.registerUserReturnsOnCall[len(fake.registerUserArgsForCall)]
	fake.registerUserArgsForCall = append(fake.registerUserArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterUser", []interface{}{arg1, arg2, arg3})
	fake.registerUserMutex.Unlock()
	if fake.RegisterUserStub != nil {
		return fake.RegisterUserStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) RegisterUserCallCount() int {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	return len(fake.registerUserArgsForCall)
}

func (fake *FakeAccountService) RegisterUserCalls(stub func(string, string, string) (int64, error)) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = stub
}

func (fake *FakeAccountService) RegisterUserArgsForCall(i int) (string, string, string) {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	argsForCall := fake.registerUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAccountService) RegisterUserReturns(result1 int64, result2 error) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = nil
	fake.registerUserReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) RegisterUserReturnsOnCall(i int, result1 int64, result2 error) {
	fake.registerUserMutex.Lock()
	defer fake.registerUserMutex.Unlock()
	fake.RegisterUserStub = nil
	if fake.registerUserReturnsOnCall == nil {
		fake.registerUserReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.registerUserReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) RequestPasswordReset(arg1 string) (string, error) {
	fake.requestPasswordResetMutex.Lock()
	ret, specificReturn := fake.requestPasswordResetReturnsOnCall[len(fake.requestPasswordResetArgsForCall)]
	fake.requestPasswordResetArgsForCall = append(fake.requestPasswordResetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RequestPasswordReset", []interface{}{arg1})
	fake.requestPasswordResetMutex.Unlock()
	if fake.RequestPasswordResetStub != nil {
		return fake.RequestPasswordResetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestPasswordResetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) RequestPasswordResetCallCount() int {
	fake.requestPasswordResetMutex.RLock()
	defer fake.requestPasswordResetMutex.RUnlock()
	return len(fake.requestPasswordResetArgsForCall)
}

func (fake *FakeAccountService) RequestPasswordResetCalls(stub func(string) (string, error)) {
	fake.requestPasswordResetMutex.Lock()
	defer fake.requestPasswordResetMutex.Unlock()
	fake.RequestPasswordResetStub = stub
}

func (fake *FakeAccountService) RequestPasswordResetArgsForCall(i int) string {
	fake.requestPasswordResetMutex.RLock()
	defer fake.requestPasswordResetMutex.RUnlock()
	argsForCall := fake.requestPasswordResetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccountService) RequestPasswordResetReturns(result1 string, result2 error) {
	fake.requestPasswordResetMutex.Lock()
	defer fake.requestPasswordResetMutex.Unlock()
	fake.RequestPasswordResetStub = nil
	fake.requestPasswordResetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) RequestPasswordResetReturnsOnCall(i int, result1 string, result2 error) {
	fake.requestPasswordResetMutex.Lock()
	defer fake.requestPasswordResetMutex.Unlock()
	fake.RequestPasswordResetStub = nil
	if fake.requestPasswordResetReturnsOnCall == nil {
		fake.requestPasswordResetReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.requestPasswordResetReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) ResetPassword(arg1 string, arg2 string) (bool, error) {
	fake.resetPasswordMutex.Lock()
	ret, specificReturn := fake.resetPasswordReturnsOnCall[len(fake.resetPasswordArgsForCall)]
	fake.resetPasswordArgsForCall = append(fake.resetPasswordArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ResetPassword", []interface{}{arg1, arg2})
	fake.resetPasswordMutex.Unlock()
	if fake.ResetPasswordStub != nil {
		return fake.ResetPasswordStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resetPasswordReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) ResetPasswordCallCount() int {
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	return len(fake.resetPasswordArgsForCall)
}

func (fake *FakeAccountService) ResetPasswordCalls(stub func(string, string) (bool, error)) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = stub
}

func (fake *FakeAccountService) ResetPasswordArgsForCall(i int) (string, string) {
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	argsForCall := fake.resetPasswordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountService) ResetPasswordReturns(result1 bool, result2 error) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = nil
	fake.resetPasswordReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) ResetPasswordReturnsOnCall(i int, result1 bool, result2 error) {
	fake.resetPasswordMutex.Lock()
	defer fake.resetPasswordMutex.Unlock()
	fake.ResetPasswordStub = nil
	if fake.resetPasswordReturnsOnCall == nil {
		fake.resetPasswordReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.resetPasswordReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) VerifyAccount(arg1 string, arg2 string) (int64, error) {
	fake.verifyAccountMutex.Lock()
	ret, specificReturn := fake.verifyAccountReturnsOnCall[len(fake.verifyAccountArgsForCall)]
	fake.verifyAccountArgsForCall = append(fake.verifyAccountArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("VerifyAccount", []interface{}{arg1, arg2})
	fake.verifyAccountMutex.Unlock()
	if fake.VerifyAccountStub != nil {
		return fake.VerifyAccountStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.verifyAccountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountService) VerifyAccountCallCount() int {
	fake.verifyAccountMutex.RLock()
	defer fake.verifyAccountMutex.RUnlock()
	return len(fake.verifyAccountArgsForCall)
}

func (fake *FakeAccountService) VerifyAccountCalls(stub func(string, string) (int64, error)) {
	fake.verifyAccountMutex.Lock()
	defer fake.verifyAccountMutex.Unlock()
	fake.VerifyAccountStub = stub
}

func (fake *FakeAccountService) VerifyAccountArgsForCall(i int) (string, string) {
	fake.verifyAccountMutex.RLock()
	defer fake.verifyAccountMutex.RUnlock()
	argsForCall := fake.verifyAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccountService) VerifyAccountReturns(result1 int64, result2 error) {
	fake.verifyAccountMutex.Lock()
	defer fake.verifyAccountMutex.Unlock()
	fake.VerifyAccountStub = nil
	fake.verifyAccountReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) VerifyAccountReturnsOnCall(i int, result1 int64, result2 error) {
	fake.verifyAccountMutex.Lock()
	defer fake.verifyAccountMutex.Unlock()
	fake.VerifyAccountStub = nil
	if fake.verifyAccountReturnsOnCall == nil {
		fake.verifyAccountReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.verifyAccountReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateAccountMutex.RLock()
	defer fake.activateAccountMutex.RUnlock()
	fake.createAccountMutex.RLock()
	defer fake.createAccountMutex.RUnlock()
	fake.getPasswordResetTokenMutex.RLock()
	defer fake.getPasswordResetTokenMutex.RUnlock()
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	fake.requestPasswordResetMutex.RLock()
	defer fake.requestPasswordResetMutex.RUnlock()
	fake.resetPasswordMutex.RLock()
	defer fake.resetPasswordMutex.RUnlock()
	fake.verifyAccountMutex.RLock()
	defer fake.verifyAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.AccountService = new(FakeAccountService)
