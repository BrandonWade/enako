// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/services"
)

type FakeChangeEmailService struct {
	RequestEmailChangeStub        func(int64) (string, error)
	requestEmailChangeMutex       sync.RWMutex
	requestEmailChangeArgsForCall []struct {
		arg1 int64
	}
	requestEmailChangeReturns struct {
		result1 string
		result2 error
	}
	requestEmailChangeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChangeEmailService) RequestEmailChange(arg1 int64) (string, error) {
	fake.requestEmailChangeMutex.Lock()
	ret, specificReturn := fake.requestEmailChangeReturnsOnCall[len(fake.requestEmailChangeArgsForCall)]
	fake.requestEmailChangeArgsForCall = append(fake.requestEmailChangeArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("RequestEmailChange", []interface{}{arg1})
	fake.requestEmailChangeMutex.Unlock()
	if fake.RequestEmailChangeStub != nil {
		return fake.RequestEmailChangeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.requestEmailChangeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChangeEmailService) RequestEmailChangeCallCount() int {
	fake.requestEmailChangeMutex.RLock()
	defer fake.requestEmailChangeMutex.RUnlock()
	return len(fake.requestEmailChangeArgsForCall)
}

func (fake *FakeChangeEmailService) RequestEmailChangeCalls(stub func(int64) (string, error)) {
	fake.requestEmailChangeMutex.Lock()
	defer fake.requestEmailChangeMutex.Unlock()
	fake.RequestEmailChangeStub = stub
}

func (fake *FakeChangeEmailService) RequestEmailChangeArgsForCall(i int) int64 {
	fake.requestEmailChangeMutex.RLock()
	defer fake.requestEmailChangeMutex.RUnlock()
	argsForCall := fake.requestEmailChangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeChangeEmailService) RequestEmailChangeReturns(result1 string, result2 error) {
	fake.requestEmailChangeMutex.Lock()
	defer fake.requestEmailChangeMutex.Unlock()
	fake.RequestEmailChangeStub = nil
	fake.requestEmailChangeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeEmailService) RequestEmailChangeReturnsOnCall(i int, result1 string, result2 error) {
	fake.requestEmailChangeMutex.Lock()
	defer fake.requestEmailChangeMutex.Unlock()
	fake.RequestEmailChangeStub = nil
	if fake.requestEmailChangeReturnsOnCall == nil {
		fake.requestEmailChangeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.requestEmailChangeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeChangeEmailService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requestEmailChangeMutex.RLock()
	defer fake.requestEmailChangeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChangeEmailService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.ChangeEmailService = new(FakeChangeEmailService)
