// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/services"
)

type FakeEmailService struct {
	SendActivateAccountEmailStub        func(string, string) error
	sendActivateAccountEmailMutex       sync.RWMutex
	sendActivateAccountEmailArgsForCall []struct {
		arg1 string
		arg2 string
	}
	sendActivateAccountEmailReturns struct {
		result1 error
	}
	sendActivateAccountEmailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmailService) SendActivateAccountEmail(arg1 string, arg2 string) error {
	fake.sendActivateAccountEmailMutex.Lock()
	ret, specificReturn := fake.sendActivateAccountEmailReturnsOnCall[len(fake.sendActivateAccountEmailArgsForCall)]
	fake.sendActivateAccountEmailArgsForCall = append(fake.sendActivateAccountEmailArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SendActivateAccountEmail", []interface{}{arg1, arg2})
	fake.sendActivateAccountEmailMutex.Unlock()
	if fake.SendActivateAccountEmailStub != nil {
		return fake.SendActivateAccountEmailStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sendActivateAccountEmailReturns
	return fakeReturns.result1
}

func (fake *FakeEmailService) SendActivateAccountEmailCallCount() int {
	fake.sendActivateAccountEmailMutex.RLock()
	defer fake.sendActivateAccountEmailMutex.RUnlock()
	return len(fake.sendActivateAccountEmailArgsForCall)
}

func (fake *FakeEmailService) SendActivateAccountEmailCalls(stub func(string, string) error) {
	fake.sendActivateAccountEmailMutex.Lock()
	defer fake.sendActivateAccountEmailMutex.Unlock()
	fake.SendActivateAccountEmailStub = stub
}

func (fake *FakeEmailService) SendActivateAccountEmailArgsForCall(i int) (string, string) {
	fake.sendActivateAccountEmailMutex.RLock()
	defer fake.sendActivateAccountEmailMutex.RUnlock()
	argsForCall := fake.sendActivateAccountEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmailService) SendActivateAccountEmailReturns(result1 error) {
	fake.sendActivateAccountEmailMutex.Lock()
	defer fake.sendActivateAccountEmailMutex.Unlock()
	fake.SendActivateAccountEmailStub = nil
	fake.sendActivateAccountEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailService) SendActivateAccountEmailReturnsOnCall(i int, result1 error) {
	fake.sendActivateAccountEmailMutex.Lock()
	defer fake.sendActivateAccountEmailMutex.Unlock()
	fake.SendActivateAccountEmailStub = nil
	if fake.sendActivateAccountEmailReturnsOnCall == nil {
		fake.sendActivateAccountEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendActivateAccountEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendActivateAccountEmailMutex.RLock()
	defer fake.sendActivateAccountEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEmailService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.EmailService = new(FakeEmailService)
