// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/models"
	"github.com/BrandonWade/enako/api/services"
)

type FakeExpenseService struct {
	CreateExpenseStub        func(int64, *models.Expense) (int64, error)
	createExpenseMutex       sync.RWMutex
	createExpenseArgsForCall []struct {
		arg1 int64
		arg2 *models.Expense
	}
	createExpenseReturns struct {
		result1 int64
		result2 error
	}
	createExpenseReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	DeleteExpenseStub        func(int64, int64) (int64, error)
	deleteExpenseMutex       sync.RWMutex
	deleteExpenseArgsForCall []struct {
		arg1 int64
		arg2 int64
	}
	deleteExpenseReturns struct {
		result1 int64
		result2 error
	}
	deleteExpenseReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetExpensesStub        func(int64) ([]models.Expense, error)
	getExpensesMutex       sync.RWMutex
	getExpensesArgsForCall []struct {
		arg1 int64
	}
	getExpensesReturns struct {
		result1 []models.Expense
		result2 error
	}
	getExpensesReturnsOnCall map[int]struct {
		result1 []models.Expense
		result2 error
	}
	UpdateExpenseStub        func(int64, int64, *models.Expense) (int64, error)
	updateExpenseMutex       sync.RWMutex
	updateExpenseArgsForCall []struct {
		arg1 int64
		arg2 int64
		arg3 *models.Expense
	}
	updateExpenseReturns struct {
		result1 int64
		result2 error
	}
	updateExpenseReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExpenseService) CreateExpense(arg1 int64, arg2 *models.Expense) (int64, error) {
	fake.createExpenseMutex.Lock()
	ret, specificReturn := fake.createExpenseReturnsOnCall[len(fake.createExpenseArgsForCall)]
	fake.createExpenseArgsForCall = append(fake.createExpenseArgsForCall, struct {
		arg1 int64
		arg2 *models.Expense
	}{arg1, arg2})
	fake.recordInvocation("CreateExpense", []interface{}{arg1, arg2})
	fake.createExpenseMutex.Unlock()
	if fake.CreateExpenseStub != nil {
		return fake.CreateExpenseStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createExpenseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExpenseService) CreateExpenseCallCount() int {
	fake.createExpenseMutex.RLock()
	defer fake.createExpenseMutex.RUnlock()
	return len(fake.createExpenseArgsForCall)
}

func (fake *FakeExpenseService) CreateExpenseCalls(stub func(int64, *models.Expense) (int64, error)) {
	fake.createExpenseMutex.Lock()
	defer fake.createExpenseMutex.Unlock()
	fake.CreateExpenseStub = stub
}

func (fake *FakeExpenseService) CreateExpenseArgsForCall(i int) (int64, *models.Expense) {
	fake.createExpenseMutex.RLock()
	defer fake.createExpenseMutex.RUnlock()
	argsForCall := fake.createExpenseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeExpenseService) CreateExpenseReturns(result1 int64, result2 error) {
	fake.createExpenseMutex.Lock()
	defer fake.createExpenseMutex.Unlock()
	fake.CreateExpenseStub = nil
	fake.createExpenseReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) CreateExpenseReturnsOnCall(i int, result1 int64, result2 error) {
	fake.createExpenseMutex.Lock()
	defer fake.createExpenseMutex.Unlock()
	fake.CreateExpenseStub = nil
	if fake.createExpenseReturnsOnCall == nil {
		fake.createExpenseReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createExpenseReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) DeleteExpense(arg1 int64, arg2 int64) (int64, error) {
	fake.deleteExpenseMutex.Lock()
	ret, specificReturn := fake.deleteExpenseReturnsOnCall[len(fake.deleteExpenseArgsForCall)]
	fake.deleteExpenseArgsForCall = append(fake.deleteExpenseArgsForCall, struct {
		arg1 int64
		arg2 int64
	}{arg1, arg2})
	fake.recordInvocation("DeleteExpense", []interface{}{arg1, arg2})
	fake.deleteExpenseMutex.Unlock()
	if fake.DeleteExpenseStub != nil {
		return fake.DeleteExpenseStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteExpenseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExpenseService) DeleteExpenseCallCount() int {
	fake.deleteExpenseMutex.RLock()
	defer fake.deleteExpenseMutex.RUnlock()
	return len(fake.deleteExpenseArgsForCall)
}

func (fake *FakeExpenseService) DeleteExpenseCalls(stub func(int64, int64) (int64, error)) {
	fake.deleteExpenseMutex.Lock()
	defer fake.deleteExpenseMutex.Unlock()
	fake.DeleteExpenseStub = stub
}

func (fake *FakeExpenseService) DeleteExpenseArgsForCall(i int) (int64, int64) {
	fake.deleteExpenseMutex.RLock()
	defer fake.deleteExpenseMutex.RUnlock()
	argsForCall := fake.deleteExpenseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeExpenseService) DeleteExpenseReturns(result1 int64, result2 error) {
	fake.deleteExpenseMutex.Lock()
	defer fake.deleteExpenseMutex.Unlock()
	fake.DeleteExpenseStub = nil
	fake.deleteExpenseReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) DeleteExpenseReturnsOnCall(i int, result1 int64, result2 error) {
	fake.deleteExpenseMutex.Lock()
	defer fake.deleteExpenseMutex.Unlock()
	fake.DeleteExpenseStub = nil
	if fake.deleteExpenseReturnsOnCall == nil {
		fake.deleteExpenseReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.deleteExpenseReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) GetExpenses(arg1 int64) ([]models.Expense, error) {
	fake.getExpensesMutex.Lock()
	ret, specificReturn := fake.getExpensesReturnsOnCall[len(fake.getExpensesArgsForCall)]
	fake.getExpensesArgsForCall = append(fake.getExpensesArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("GetExpenses", []interface{}{arg1})
	fake.getExpensesMutex.Unlock()
	if fake.GetExpensesStub != nil {
		return fake.GetExpensesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getExpensesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExpenseService) GetExpensesCallCount() int {
	fake.getExpensesMutex.RLock()
	defer fake.getExpensesMutex.RUnlock()
	return len(fake.getExpensesArgsForCall)
}

func (fake *FakeExpenseService) GetExpensesCalls(stub func(int64) ([]models.Expense, error)) {
	fake.getExpensesMutex.Lock()
	defer fake.getExpensesMutex.Unlock()
	fake.GetExpensesStub = stub
}

func (fake *FakeExpenseService) GetExpensesArgsForCall(i int) int64 {
	fake.getExpensesMutex.RLock()
	defer fake.getExpensesMutex.RUnlock()
	argsForCall := fake.getExpensesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeExpenseService) GetExpensesReturns(result1 []models.Expense, result2 error) {
	fake.getExpensesMutex.Lock()
	defer fake.getExpensesMutex.Unlock()
	fake.GetExpensesStub = nil
	fake.getExpensesReturns = struct {
		result1 []models.Expense
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) GetExpensesReturnsOnCall(i int, result1 []models.Expense, result2 error) {
	fake.getExpensesMutex.Lock()
	defer fake.getExpensesMutex.Unlock()
	fake.GetExpensesStub = nil
	if fake.getExpensesReturnsOnCall == nil {
		fake.getExpensesReturnsOnCall = make(map[int]struct {
			result1 []models.Expense
			result2 error
		})
	}
	fake.getExpensesReturnsOnCall[i] = struct {
		result1 []models.Expense
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) UpdateExpense(arg1 int64, arg2 int64, arg3 *models.Expense) (int64, error) {
	fake.updateExpenseMutex.Lock()
	ret, specificReturn := fake.updateExpenseReturnsOnCall[len(fake.updateExpenseArgsForCall)]
	fake.updateExpenseArgsForCall = append(fake.updateExpenseArgsForCall, struct {
		arg1 int64
		arg2 int64
		arg3 *models.Expense
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateExpense", []interface{}{arg1, arg2, arg3})
	fake.updateExpenseMutex.Unlock()
	if fake.UpdateExpenseStub != nil {
		return fake.UpdateExpenseStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateExpenseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExpenseService) UpdateExpenseCallCount() int {
	fake.updateExpenseMutex.RLock()
	defer fake.updateExpenseMutex.RUnlock()
	return len(fake.updateExpenseArgsForCall)
}

func (fake *FakeExpenseService) UpdateExpenseCalls(stub func(int64, int64, *models.Expense) (int64, error)) {
	fake.updateExpenseMutex.Lock()
	defer fake.updateExpenseMutex.Unlock()
	fake.UpdateExpenseStub = stub
}

func (fake *FakeExpenseService) UpdateExpenseArgsForCall(i int) (int64, int64, *models.Expense) {
	fake.updateExpenseMutex.RLock()
	defer fake.updateExpenseMutex.RUnlock()
	argsForCall := fake.updateExpenseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeExpenseService) UpdateExpenseReturns(result1 int64, result2 error) {
	fake.updateExpenseMutex.Lock()
	defer fake.updateExpenseMutex.Unlock()
	fake.UpdateExpenseStub = nil
	fake.updateExpenseReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) UpdateExpenseReturnsOnCall(i int, result1 int64, result2 error) {
	fake.updateExpenseMutex.Lock()
	defer fake.updateExpenseMutex.Unlock()
	fake.UpdateExpenseStub = nil
	if fake.updateExpenseReturnsOnCall == nil {
		fake.updateExpenseReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.updateExpenseReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeExpenseService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createExpenseMutex.RLock()
	defer fake.createExpenseMutex.RUnlock()
	fake.deleteExpenseMutex.RLock()
	defer fake.deleteExpenseMutex.RUnlock()
	fake.getExpensesMutex.RLock()
	defer fake.getExpensesMutex.RUnlock()
	fake.updateExpenseMutex.RLock()
	defer fake.updateExpenseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExpenseService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.ExpenseService = new(FakeExpenseService)
