// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/BrandonWade/enako/api/services"
)

type FakeTemplateService struct {
	GenerateAccountActivationEmailStub        func(string) (string, error)
	generateAccountActivationEmailMutex       sync.RWMutex
	generateAccountActivationEmailArgsForCall []struct {
		arg1 string
	}
	generateAccountActivationEmailReturns struct {
		result1 string
		result2 error
	}
	generateAccountActivationEmailReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GeneratePasswordResetEmailStub        func(string) (string, error)
	generatePasswordResetEmailMutex       sync.RWMutex
	generatePasswordResetEmailArgsForCall []struct {
		arg1 string
	}
	generatePasswordResetEmailReturns struct {
		result1 string
		result2 error
	}
	generatePasswordResetEmailReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTemplateService) GenerateAccountActivationEmail(arg1 string) (string, error) {
	fake.generateAccountActivationEmailMutex.Lock()
	ret, specificReturn := fake.generateAccountActivationEmailReturnsOnCall[len(fake.generateAccountActivationEmailArgsForCall)]
	fake.generateAccountActivationEmailArgsForCall = append(fake.generateAccountActivationEmailArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GenerateAccountActivationEmail", []interface{}{arg1})
	fake.generateAccountActivationEmailMutex.Unlock()
	if fake.GenerateAccountActivationEmailStub != nil {
		return fake.GenerateAccountActivationEmailStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateAccountActivationEmailReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTemplateService) GenerateAccountActivationEmailCallCount() int {
	fake.generateAccountActivationEmailMutex.RLock()
	defer fake.generateAccountActivationEmailMutex.RUnlock()
	return len(fake.generateAccountActivationEmailArgsForCall)
}

func (fake *FakeTemplateService) GenerateAccountActivationEmailCalls(stub func(string) (string, error)) {
	fake.generateAccountActivationEmailMutex.Lock()
	defer fake.generateAccountActivationEmailMutex.Unlock()
	fake.GenerateAccountActivationEmailStub = stub
}

func (fake *FakeTemplateService) GenerateAccountActivationEmailArgsForCall(i int) string {
	fake.generateAccountActivationEmailMutex.RLock()
	defer fake.generateAccountActivationEmailMutex.RUnlock()
	argsForCall := fake.generateAccountActivationEmailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTemplateService) GenerateAccountActivationEmailReturns(result1 string, result2 error) {
	fake.generateAccountActivationEmailMutex.Lock()
	defer fake.generateAccountActivationEmailMutex.Unlock()
	fake.GenerateAccountActivationEmailStub = nil
	fake.generateAccountActivationEmailReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateService) GenerateAccountActivationEmailReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateAccountActivationEmailMutex.Lock()
	defer fake.generateAccountActivationEmailMutex.Unlock()
	fake.GenerateAccountActivationEmailStub = nil
	if fake.generateAccountActivationEmailReturnsOnCall == nil {
		fake.generateAccountActivationEmailReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateAccountActivationEmailReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateService) GeneratePasswordResetEmail(arg1 string) (string, error) {
	fake.generatePasswordResetEmailMutex.Lock()
	ret, specificReturn := fake.generatePasswordResetEmailReturnsOnCall[len(fake.generatePasswordResetEmailArgsForCall)]
	fake.generatePasswordResetEmailArgsForCall = append(fake.generatePasswordResetEmailArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GeneratePasswordResetEmail", []interface{}{arg1})
	fake.generatePasswordResetEmailMutex.Unlock()
	if fake.GeneratePasswordResetEmailStub != nil {
		return fake.GeneratePasswordResetEmailStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generatePasswordResetEmailReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTemplateService) GeneratePasswordResetEmailCallCount() int {
	fake.generatePasswordResetEmailMutex.RLock()
	defer fake.generatePasswordResetEmailMutex.RUnlock()
	return len(fake.generatePasswordResetEmailArgsForCall)
}

func (fake *FakeTemplateService) GeneratePasswordResetEmailCalls(stub func(string) (string, error)) {
	fake.generatePasswordResetEmailMutex.Lock()
	defer fake.generatePasswordResetEmailMutex.Unlock()
	fake.GeneratePasswordResetEmailStub = stub
}

func (fake *FakeTemplateService) GeneratePasswordResetEmailArgsForCall(i int) string {
	fake.generatePasswordResetEmailMutex.RLock()
	defer fake.generatePasswordResetEmailMutex.RUnlock()
	argsForCall := fake.generatePasswordResetEmailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTemplateService) GeneratePasswordResetEmailReturns(result1 string, result2 error) {
	fake.generatePasswordResetEmailMutex.Lock()
	defer fake.generatePasswordResetEmailMutex.Unlock()
	fake.GeneratePasswordResetEmailStub = nil
	fake.generatePasswordResetEmailReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateService) GeneratePasswordResetEmailReturnsOnCall(i int, result1 string, result2 error) {
	fake.generatePasswordResetEmailMutex.Lock()
	defer fake.generatePasswordResetEmailMutex.Unlock()
	fake.GeneratePasswordResetEmailStub = nil
	if fake.generatePasswordResetEmailReturnsOnCall == nil {
		fake.generatePasswordResetEmailReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generatePasswordResetEmailReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateAccountActivationEmailMutex.RLock()
	defer fake.generateAccountActivationEmailMutex.RUnlock()
	fake.generatePasswordResetEmailMutex.RLock()
	defer fake.generatePasswordResetEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTemplateService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.TemplateService = new(FakeTemplateService)
